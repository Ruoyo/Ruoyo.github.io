<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ruoyo的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-22T09:20:17.401Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ruoyo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>torch.nn函数</title>
    <link href="http://yoursite.com/2020/03/22/02.1%20torch.nn%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/03/22/02.1%20torch.nn%E5%87%BD%E6%95%B0/</id>
    <published>2020-03-22T09:21:17.107Z</published>
    <updated>2020-03-22T09:20:17.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="torch-nn-Sequential"><a href="#torch-nn-Sequential" class="headerlink" title="torch.nn.Sequential()"></a>torch.nn.Sequential()</h1><p><code>torch.nn.Sequential</code>是一个<code>Sequential</code>容器，模块将按照构造函数中传递的顺序添加到模块中。通俗的话说，就是根据自己的需求，把不同的函数组合成一个（小的）模块使用或者把组合的模块添加到自己的网络中。主要有两种使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法</span></span><br><span class="line">conv_module = nn.Sequential(</span><br><span class="line">          nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU(),</span><br><span class="line">          nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 具体的使用方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        self.conv_module = nn.Sequential(</span><br><span class="line">          nn.Conv2d(<span class="number">1</span>,<span class="number">20</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU(),</span><br><span class="line">          nn.Conv2d(<span class="number">20</span>,<span class="number">64</span>,<span class="number">5</span>),</span><br><span class="line">          nn.ReLU()</span><br><span class="line">        )</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, input)</span>:</span></span><br><span class="line">        out = self.conv_module(input)</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;torch-nn-Sequential&quot;&gt;&lt;a href=&quot;#torch-nn-Sequential&quot; class=&quot;headerlink&quot; title=&quot;torch.nn.Sequential()&quot;&gt;&lt;/a&gt;torch.nn.Sequential()&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="pytorch" scheme="http://yoursite.com/categories/Python/pytorch/"/>
    
    
      <category term="pytorch" scheme="http://yoursite.com/tags/pytorch/"/>
    
      <category term="torch.nn" scheme="http://yoursite.com/tags/torch-nn/"/>
    
  </entry>
  
  <entry>
    <title>Haar特征</title>
    <link href="http://yoursite.com/2020/03/22/Haar%E7%89%B9%E5%BE%81/"/>
    <id>http://yoursite.com/2020/03/22/Haar%E7%89%B9%E5%BE%81/</id>
    <published>2020-03-22T04:35:49.970Z</published>
    <updated>2020-03-22T04:35:14.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Haar特征"><a href="#Haar特征" class="headerlink" title="Haar特征"></a>Haar特征</h1><p>参考链接：<a href="https://blog.csdn.net/danmeng8068/article/details/80496776" target="_blank" rel="noopener">https://blog.csdn.net/danmeng8068/article/details/80496776</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Haar特征&quot;&gt;&lt;a href=&quot;#Haar特征&quot; class=&quot;headerlink&quot; title=&quot;Haar特征&quot;&gt;&lt;/a&gt;Haar特征&lt;/h1&gt;&lt;p&gt;参考链接：&lt;a href=&quot;https://blog.csdn.net/danmeng8068/articl
      
    
    </summary>
    
    
    
      <category term="Haar" scheme="http://yoursite.com/tags/Haar/"/>
    
  </entry>
  
  <entry>
    <title>Linux语法</title>
    <link href="http://yoursite.com/2020/03/21/Linux%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2020/03/21/Linux%E8%AF%AD%E8%A8%80/</id>
    <published>2020-03-21T02:12:29.700Z</published>
    <updated>2020-03-21T04:00:01.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、window10命令提示符"><a href="#一、window10命令提示符" class="headerlink" title="一、window10命令提示符"></a>一、window10命令提示符</h1><h2 id="1-pip升级"><a href="#1-pip升级" class="headerlink" title="1. pip升级"></a>1. pip升级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、window10命令提示符&quot;&gt;&lt;a href=&quot;#一、window10命令提示符&quot; class=&quot;headerlink&quot; title=&quot;一、window10命令提示符&quot;&gt;&lt;/a&gt;一、window10命令提示符&lt;/h1&gt;&lt;h2 id=&quot;1-pip升级&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Typora使用</title>
    <link href="http://yoursite.com/2020/03/20/Typora%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2020/03/20/Typora%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2020-03-19T16:05:45.999Z</published>
    <updated>2020-03-19T17:16:36.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora使用说明"><a href="#Typora使用说明" class="headerlink" title="Typora使用说明"></a>Typora使用说明</h1><p>原文链接1：<a href="https://blog.csdn.net/happyday_d/article/details/83715440" target="_blank" rel="noopener">https://blog.csdn.net/happyday_d/article/details/83715440</a></p><p>原文链接2：<a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455" target="_blank" rel="noopener">https://blog.csdn.net/mingzhuo_126/article/details/82722455</a></p><p>原文链接3：<a href="https://blog.csdn.net/SIMBA1949/article/details/79001226" target="_blank" rel="noopener">https://blog.csdn.net/SIMBA1949/article/details/79001226</a></p><h2 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h2><table><thead><tr><th>快捷键</th><th>作用</th><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+1</td><td>一阶标题</td><td>Ctrl+B</td><td>字体加粗</td></tr><tr><td>Ctrl+2</td><td>二阶标题</td><td>Ctrl+I</td><td>字体倾斜</td></tr><tr><td>Ctrl+3</td><td>三阶标题</td><td>Ctrl+U</td><td>下划线</td></tr><tr><td>Ctrl+4</td><td>四阶标题</td><td>Ctrl+Home</td><td>返回Typora顶部</td></tr><tr><td>Ctrl+5</td><td>五阶标题</td><td>Ctrl+End</td><td>返回Typora底部</td></tr><tr><td>Ctrl+6</td><td>六阶标题</td><td>Ctrl+T</td><td>创建表格</td></tr><tr><td>Ctrl+L</td><td>选中某句话</td><td>Ctrl+K</td><td>创建超链接</td></tr><tr><td>Ctrl+D</td><td>选中某个单词</td><td>Ctrl+F</td><td>搜索</td></tr><tr><td>Ctrl+E</td><td>选中相同格式的文字</td><td>Ctrl+H</td><td>搜索并替换</td></tr><tr><td>Alt+Shift+5</td><td>删除线</td><td>Ctrl+Shift+I</td><td>插入图片</td></tr><tr><td>Ctrl+Shift+m</td><td>公式块</td><td></td><td></td></tr></tbody></table><h2 id="上下标、根号、省略号"><a href="#上下标、根号、省略号" class="headerlink" title="上下标、根号、省略号"></a>上下标、根号、省略号</h2><table><thead><tr><th>符号</th><th>名称</th><th>Markdown</th></tr></thead><tbody><tr><td>$\cdots$</td><td>省略号</td><td><code>$\cdots$</code></td></tr><tr><td>$ x^2$</td><td>上标</td><td><code>x^2^</code></td></tr><tr><td>$x^y$</td><td>上标</td><td><code>$x^y$</code></td></tr><tr><td>$y_1$</td><td>下标</td><td></td></tr></tbody></table><h2 id="Typora页内跳转"><a href="#Typora页内跳转" class="headerlink" title="Typora页内跳转"></a>Typora页内跳转</h2><p>页内跳转有两种情况：</p><ol><li>跳转到标题所在位置</li><li>跳转到非标题所在位置，即页面内任何位置</li></ol><blockquote><p>设置业内跳转的快捷键：<code>Ctrl + K</code></p><p>跳转的方式：按着<code>Ctrl</code>键，同时鼠标点击设置字体内容</p></blockquote><p>第一种跳转方法，即跳转到标题所在位置，用Markdown的标准跳转方法即可，而Typora跟它是完全兼容的，即：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[任意文字] (#标题名称)</span><br></pre></td></tr></table></figure><p>第二种跳转方法，即跳转到任意位置，用<strong>a</strong>标签即可，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我是被跳转的内容&lt;a name&#x3D;&quot;第二种跳转&quot;&gt;&lt;&#x2F;a&gt;   &#x2F;&#x2F;锚点</span><br><span class="line">[任意文字] (#第二种跳转)                  &#x2F;&#x2F;链接点</span><br><span class="line">or</span><br><span class="line">&lt;a name&#x3D;&quot;第二种跳转&quot;&gt;测试&lt;&#x2F;a&gt;            &#x2F;&#x2F;锚点</span><br><span class="line">&lt;a href&#x3D;&quot;#第二种跳转&quot;&gt;166116&lt;&#x2F;a&gt;        &#x2F;&#x2F;链接点</span><br></pre></td></tr></table></figure><p>想要实现跳转，就要告诉代码你要跳转到的<strong>具体位置</strong>，即给一个<strong>锚点</strong>，就像船到港后需要抛锚来固定一样。这个具体位置可以是一个<strong>URL</strong>；具体位置可以是<strong>标题</strong>，因为标题前面是有若干个“#”的，可以准确定位它；具体位置也可以是一个用<strong>HTML标签a</strong>定义的锚点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Typora使用说明&quot;&gt;&lt;a href=&quot;#Typora使用说明&quot; class=&quot;headerlink&quot; title=&quot;Typora使用说明&quot;&gt;&lt;/a&gt;Typora使用说明&lt;/h1&gt;&lt;p&gt;原文链接1：&lt;a href=&quot;https://blog.csdn.net/h
      
    
    </summary>
    
    
      <category term="Typora" scheme="http://yoursite.com/categories/Typora/"/>
    
    
      <category term="Typora" scheme="http://yoursite.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/19/hello-world/"/>
    <id>http://yoursite.com/2020/03/19/hello-world/</id>
    <published>2020-03-19T08:04:22.741Z</published>
    <updated>2020-03-19T08:04:22.741Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MYSQL基础课堂笔记</title>
    <link href="http://yoursite.com/2020/01/21/MYSQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/01/21/MYSQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-21T04:06:34.885Z</published>
    <updated>2020-03-21T02:51:55.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、MySQl数据库软件"><a href="#一、MySQl数据库软件" class="headerlink" title="一、MySQl数据库软件"></a>一、MySQl数据库软件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 安装</span><br><span class="line">* 参见 《MySQL基础.pdf》</span><br><span class="line">2. 卸载</span><br><span class="line">1. 去 mysql 的安装目录找到 my.ini 文件</span><br><span class="line">2.卸载 MySQL</span><br><span class="line">3.删除 C:&#x2F;ProgramData 目录下的 MySQL 文件夹</span><br><span class="line">3. 配置</span><br><span class="line">* MySQL服务启动</span><br><span class="line">1. 手动</span><br><span class="line">2. cmd--&gt;service.msc 打开服务的窗口</span><br><span class="line">3. 使用管理员打开 cmd </span><br><span class="line">* net start mysql ：启动 mysql 的服务</span><br><span class="line">* net stop mysql  ：关闭 mysql 服务</span><br><span class="line">* MySQL登录</span><br><span class="line">1.mysql -uroot -proot</span><br><span class="line">2.mysql -hip -p链接目标的密码</span><br><span class="line">3.mysql --host&#x3D;ip --user&#x3D;root --password&#x3D;root</span><br><span class="line">* MySQL退出</span><br><span class="line">1.exit</span><br><span class="line">2.quit</span><br><span class="line">* MySQL目录结构</span><br><span class="line">1.MySQL安装目录：</span><br><span class="line">* 配置文件 my.ini</span><br></pre></td></tr></table></figure><h1 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.什么是SQL?</span><br><span class="line">Structured Query Language：结构化查询语言</span><br><span class="line">其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</span><br><span class="line">2.SQL通用语法</span><br><span class="line">1.SQL语句可以单行或多行书写，以分号结尾</span><br><span class="line">2.可使用空格和缩进来增强语句的可读性</span><br><span class="line">3.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</span><br><span class="line">* 单行注释： --注释内容 或 #注释内容（mysql特有）</span><br><span class="line">* 多行注释： &#x2F;* 注释 *&#x2F;</span><br><span class="line">3.SQL分类</span><br><span class="line">1）DDL(Data Definition Language)数据定义语言：用来定义数据库对象：数据库、表、列等，关键字：create、drop、alter等。</span><br><span class="line">2）DML(Data Manipulation Language)数据操作语言：用来对数据库中表的数据进行增删改。关键字：insert、delete、update等。</span><br><span class="line">3）DQL(Data Query Language)数据查询语言：用来查询数据库中表的记录(数据)。关键字：select、where等</span><br><span class="line">4）DCL(Data Control Lannguage)数据控制语言：用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT、REVOKE等。</span><br></pre></td></tr></table></figure><h1 id="三、DDL：操作数据库、表"><a href="#三、DDL：操作数据库、表" class="headerlink" title="三、DDL：操作数据库、表"></a>三、DDL：操作数据库、表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">1.操作数据库：CRUD</span><br><span class="line">1.C(create）：创建</span><br><span class="line">* 创建数据库：</span><br><span class="line">create database 数据库名称;</span><br><span class="line">* 创建数据库，判断不存在，再创建</span><br><span class="line">create database if not exists 数据库名称;</span><br><span class="line">* 创建数据库，并制定字符集</span><br><span class="line">create database 数据库名称 character set 字符集名;</span><br><span class="line">* 练习：创建db4数据库，判断是否存在，并制定字符集为gbk</span><br><span class="line">create database if not exists db4 character set gbk;</span><br><span class="line">2.R（Retrieve）：查询</span><br><span class="line">* 查询所有数据库的名称：</span><br><span class="line">show databases;</span><br><span class="line">* 查询某个数据库的字符集：查询某个数据库的创建语句</span><br><span class="line">show create database 数据库名称;</span><br><span class="line">3.U（Update）：修改</span><br><span class="line">4.D（Delete）：删除</span><br><span class="line">5.使用数据库</span><br><span class="line"></span><br><span class="line">2.操作表</span><br><span class="line">1.C(create）：创建</span><br><span class="line">1.语法：</span><br><span class="line">create table 表名(</span><br><span class="line">列名1 数据类型1,</span><br><span class="line">列名2 数据类型2,</span><br><span class="line">......</span><br><span class="line">列名n 数据类型n</span><br><span class="line">);</span><br><span class="line">* 注意：最后一列不需要加逗号</span><br><span class="line">* 数据库类型：</span><br><span class="line">1.int：整数类型</span><br><span class="line">* age int,</span><br><span class="line">2.double：小数类型</span><br><span class="line">* score doublei(5,2)</span><br><span class="line">3.date：日期，只包含年月日的日期，yyy-MM-dd</span><br><span class="line">4.datetime：日期，包含年月日时分秒，yyy-MM-dd HH:mm:ss</span><br><span class="line">5.timestamp：时间错类型，包含年月日时分秒 yyy-MM-dd</span><br><span class="line">*如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</span><br><span class="line">6.varchar：字符串</span><br><span class="line">* name varchar(20)：姓名最大字符20个字符</span><br><span class="line">2.举例：</span><br><span class="line">create table student(</span><br><span class="line">id int,</span><br><span class="line">name varchar(32),</span><br><span class="line">age int,</span><br><span class="line">score double(4,1),</span><br><span class="line">birthday date,</span><br><span class="line">insert_time timestamp);</span><br><span class="line">3.复制表</span><br><span class="line">create table 表名 like 被复制的表名;</span><br><span class="line">2.R（Retrieve）：查询</span><br><span class="line">* 查看表的结构</span><br><span class="line">desc 表名;</span><br><span class="line">3.U（Update）：修改</span><br><span class="line">1.修改表名</span><br><span class="line">alter table 表名 rename to 新的表名;</span><br><span class="line">2.修改表的字符集</span><br><span class="line">alter table 表名 character set 字符集名称;</span><br><span class="line">3.添加一列</span><br><span class="line">alter table 表名 add 列名 数据类型;</span><br><span class="line">alter table stu add gender varchar(10);</span><br><span class="line">4.修改列名称 类型</span><br><span class="line">alter table 表名 change 列名 修改后的新列名 新的数据类型;</span><br><span class="line">alter table 表名 modify 列名 新的数据类型;</span><br><span class="line">5.删除列</span><br><span class="line">alter table 表名 drop 列名;</span><br><span class="line">4.D（Delete）：删除</span><br><span class="line">* drop table 表名;</span><br><span class="line">* drop table if exists 表名；</span><br></pre></td></tr></table></figure><h1 id="四、DML：增删改表中数据"><a href="#四、DML：增删改表中数据" class="headerlink" title="四、DML：增删改表中数据"></a>四、DML：增删改表中数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.添加数据：</span><br><span class="line">* 语法：</span><br><span class="line">insert into 表名(列名1,列名2,...,列名n) values(值1,值2,...值n);</span><br><span class="line">* 注意：</span><br><span class="line">1. 列名和值要一一对应。</span><br><span class="line">2. 如果表名后，不定义列名，则默认给所有列添加值</span><br><span class="line">insert into 表名 values(值1,值2,...值n);</span><br><span class="line">3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来</span><br><span class="line">2. 删除数据：</span><br><span class="line">* 语法：</span><br><span class="line">* delete from 表名 [where 条件]</span><br><span class="line">* 注意：</span><br><span class="line">1. 如果不加条件，则删除表中所有记录。</span><br><span class="line">2. 如果要删除所有记录</span><br><span class="line">1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作</span><br><span class="line">2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</span><br><span class="line">3.修改数据：</span><br><span class="line">* 语法：</span><br><span class="line">* update 表名 set 列名1 &#x3D; 值1, 列名2 &#x3D; 值2,... [where 条件];</span><br><span class="line">* 注意：</span><br><span class="line">1. 如果不加任何条件，则会将表中所有记录全部修改。</span><br></pre></td></tr></table></figure><h1 id="五、DQL：查询表中的记录"><a href="#五、DQL：查询表中的记录" class="headerlink" title="五、DQL：查询表中的记录"></a>五、DQL：查询表中的记录</h1><ul><li>select * from 表名;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1. 语法：</span><br><span class="line">select 字段列表 from 表名列表 where 条件列表 group by 分组字段 having 分组之后的条件 order by 排序 limit 分页限定</span><br><span class="line">2. 基础查询</span><br><span class="line">1. 多个字段的查询</span><br><span class="line">select 字段名1，字段名2... from 表名；</span><br><span class="line">* 注意：</span><br><span class="line">* 如果查询所有字段，则可以使用*来替代字段列表。</span><br><span class="line">2. 去除重复：</span><br><span class="line">* distinct</span><br><span class="line">3. 计算列</span><br><span class="line">* 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</span><br><span class="line">* ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null</span><br><span class="line">* 表达式1：哪个字段需要判断是否为null</span><br><span class="line">* 如果该字段为null后的替换值。</span><br><span class="line">4. 起别名：</span><br><span class="line">* as：as也可以省略</span><br><span class="line">3. 条件查询</span><br><span class="line">1. where子句后跟条件</span><br><span class="line">2. 运算符</span><br><span class="line">* &gt; 、&lt; 、&lt;&#x3D; 、&gt;&#x3D; 、&#x3D; 、&lt;&gt;</span><br><span class="line">* BETWEEN...AND  </span><br><span class="line">* IN( 集合) </span><br><span class="line">* LIKE：模糊查询</span><br><span class="line">* 占位符：</span><br><span class="line">* _:单个任意字符</span><br><span class="line">* %：多个任意字符</span><br><span class="line">* IS NULL  </span><br><span class="line">* and  或 &amp;&amp;</span><br><span class="line">* or  或 || </span><br><span class="line">* not  或 !</span><br></pre></td></tr></table></figure><h2 id="1、排序查询"><a href="#1、排序查询" class="headerlink" title="1、排序查询"></a>1、排序查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 语法：order by 子句</span><br><span class="line">* order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...</span><br><span class="line">* 排序方式：</span><br><span class="line">* ASC：升序，默认的。</span><br><span class="line">* DESC：降序。</span><br><span class="line">* 注意：</span><br><span class="line">* 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</span><br></pre></td></tr></table></figure><h2 id="2、聚合函数"><a href="#2、聚合函数" class="headerlink" title="2、聚合函数"></a>2、聚合函数</h2><p>聚合函数：将一列数据作为一个整体，进行纵向的计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. count：计算个数</span><br><span class="line">1. 一般选择非空的列：主键</span><br><span class="line">2. count(*)</span><br><span class="line">2. max：计算最大值</span><br><span class="line">3. min：计算最小值</span><br><span class="line">4. sum：计算和</span><br><span class="line">5. avg：计算平均值</span><br><span class="line"></span><br><span class="line">* 注意：聚合函数的计算，排除null值。</span><br><span class="line">解决方案：</span><br><span class="line">1. 选择不包含非空的列进行计算</span><br><span class="line">2. IFNULL函数</span><br></pre></td></tr></table></figure><h2 id="3、分组查询"><a href="#3、分组查询" class="headerlink" title="3、分组查询"></a>3、分组查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 语法：group by 分组字段；</span><br><span class="line">2. 注意：</span><br><span class="line">1. 分组之后查询的字段：分组字段、聚合函数</span><br><span class="line">2. where 和 having 的区别？</span><br><span class="line">1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</span><br><span class="line">2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。</span><br></pre></td></tr></table></figure><h2 id="4、分页查询"><a href="#4、分页查询" class="headerlink" title="4、分页查询"></a>4、分页查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 语法：limit 开始的索引,每页查询的条数;</span><br><span class="line">2. 公式：开始的索引 &#x3D; （当前的页码 - 1） * 每页显示的条数</span><br><span class="line">3. limit 是一个MySQL&quot;方言&quot;</span><br></pre></td></tr></table></figure><h1 id="六、DCL：管理用户，授权"><a href="#六、DCL：管理用户，授权" class="headerlink" title="六、DCL：管理用户，授权"></a>六、DCL：管理用户，授权</h1><ul><li><p>DBA：数据库管理员</p></li><li><p>管理用户</p><ol><li><p>添加用户</p><blockquote><p>语法：CREATE USER ‘用户名‘@’主机名’ IDENTIFIED BY ‘密码’;</p></blockquote></li><li><p>删除用户</p><blockquote><p>语法：DROP USER ‘用户名‘@’主机名’;</p></blockquote></li><li><p>修改用户密码</p><blockquote><p>方法1：UPDATE USER SET PASSWORD = PASSWORD(‘新密码’) WHERE USER = ‘用户名’;</p><p>方法2：SET PASSWORD FOR ‘用户名‘@’主机名’ = PASSWORD(‘新密码’);</p></blockquote></li><li><p>查询用户</p><blockquote><p>– 1. 切换到mysql数据库</p><pre><code>USE myql;</code></pre><p>– 2. 查询user表</p><pre><code>SELECT * FROM USER;</code></pre><p>*通配符： % 表示可以在任意主机使用用户登录数据库</p></blockquote></li></ol></li><li><p>权限管理</p><ol><li><p>查询权限</p><blockquote><p>SHOW GRANTS FOR ‘用户名‘@’主机名’;</p></blockquote></li><li><p>授予权限</p><blockquote><p>grant 权限列表 on 数据库名.表名 to ‘用户名‘@’主机名’;<br>– 给张三用户授予所有权限，在任意数据库任意表上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON *.* TO &#39;zhangsan&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>撤销权限</p><blockquote><p>revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’;</p></blockquote></li></ol></li><li><p>mysql中忘记了root用户的密码？</p><ol><li><p>cmd – &gt; net stop mysql 停止mysql服务</p><blockquote><p>需要管理员运行该cmd</p></blockquote></li><li><p>使用无验证方式启动mysql服务： mysqld –skip-grant-tables</p></li><li><p>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</p></li><li><p>use mysql;</p></li><li><p>update user set password = password(‘你的新密码’) where user = ‘root’;</p></li><li><p>关闭两个窗口</p></li><li><p>打开任务管理器，手动结束mysqld.exe 的进程</p></li><li><p>启动mysql服务</p></li><li><p>使用新密码登录</p></li></ol></li></ul><h1 id="七、约束"><a href="#七、约束" class="headerlink" title="七、约束"></a>七、约束</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">* 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。</span><br><span class="line">* 分类：</span><br><span class="line">1. 主键约束：primary key</span><br><span class="line">2. 非空约束：not null</span><br><span class="line">3. 唯一约束：unique</span><br><span class="line">4. 外键约束：foreign key</span><br><span class="line">* 非空约束：not null，值不能为null</span><br><span class="line">1. 创建表时添加约束</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">NAME VARCHAR(20) NOT NULL -- name为非空</span><br><span class="line">);</span><br><span class="line">2. 创建表完后，添加非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</span><br><span class="line">3. 删除name的非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20);</span><br><span class="line">* 唯一约束：unique，值不能重复</span><br><span class="line">1. 创建表时，添加唯一约束</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id INT,</span><br><span class="line">phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line">* 注意mysql中，唯一约束限定的列的值可以有多个null</span><br><span class="line">2. 删除唯一约束</span><br><span class="line">ALTER TABLE stu DROP INDEX phone_number;</span><br><span class="line">3. 在创建表后，添加唯一约束</span><br><span class="line">ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</span><br></pre></td></tr></table></figure><h2 id="主键约束：primary-key"><a href="#主键约束：primary-key" class="headerlink" title="主键约束：primary key"></a>主键约束：primary key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 注意：</span><br><span class="line">1. 含义：非空且唯一</span><br><span class="line">2. 一张表只能有一个字段为主键</span><br><span class="line">3. 主键就是表中记录的唯一标识</span><br><span class="line">2. 在创建表时，添加主键约束</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line">3. 删除主键</span><br><span class="line">ALTER TABLE stu DROP PRIMARY KEY;</span><br><span class="line">4. 创建完表后，添加主键</span><br><span class="line">ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure><h2 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</span><br><span class="line">2. 在创建表时，添加主键约束，并且完成主键自增长</span><br><span class="line">create table stu(</span><br><span class="line">id int primary key auto_increment,-- 给id添加主键约束</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line">3. 删除自动增长</span><br><span class="line">ALTER TABLE stu MODIFY id INT;</span><br><span class="line">4. 添加自动增长</span><br><span class="line">ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</span><br></pre></td></tr></table></figure><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 在创建表时，可以添加外键</span><br><span class="line">* 语法：</span><br><span class="line">create table 表名(</span><br><span class="line">....</span><br><span class="line">外键列</span><br><span class="line">constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br><span class="line">2. 删除外键</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br><span class="line">3. 创建表之后，添加外键</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</span><br><span class="line">4. 级联操作</span><br><span class="line">1. 添加级联操作</span><br><span class="line">语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 </span><br><span class="line">FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;</span><br><span class="line">2. 分类：</span><br><span class="line">1. 级联更新：ON UPDATE CASCADE </span><br><span class="line">2. 级联删除：ON DELETE CASCADE</span><br></pre></td></tr></table></figure><h1 id="八、多表查询"><a href="#八、多表查询" class="headerlink" title="八、多表查询"></a>八、多表查询</h1><ul><li>笛卡尔积：<ul><li>有两个集合A,B .取这两个集合的所有组成情况。</li><li>要完成多表查询，需要消除无用的数据</li></ul></li></ul><h2 id="1、多表查询的分类："><a href="#1、多表查询的分类：" class="headerlink" title="1、多表查询的分类："></a>1、多表查询的分类：</h2><ul><li>内连接查询：</li></ul><blockquote><p>隐式内连接：使用where条件消除无用数据</p></blockquote><ul><li>显式内连接：</li></ul><blockquote><p>语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</p></blockquote><ul><li><p>外连接查询</p><p>1.左外连接</p><blockquote><p>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</p><p>查询的是左表所有数据以及其交集部分。</p></blockquote><p>2.右外连接</p><blockquote><p>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p><p>查询的是右表所有数据以及其交集部分</p><p>例子：SELECT     * FROM dept t2 RIGHT JOIN emp t1 ON t1.<code>dept_id</code> = t2.<code>id</code>;</p></blockquote></li><li><p>子查询</p><blockquote><p>概念：查询中嵌套查询，称嵌套查询为子查询。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* 子查询不同情况</span><br><span class="line">1. 子查询的结果是单行单列的：</span><br><span class="line">* 子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D;</span><br><span class="line">* </span><br><span class="line">-- 查询员工工资小于平均工资的人</span><br><span class="line">SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</span><br><span class="line">2. 子查询的结果是多行单列的：</span><br><span class="line">* 子查询可以作为条件，使用运算符in来判断</span><br><span class="line">-- 查询&#39;财务部&#39;和&#39;市场部&#39;所有的员工信息</span><br><span class="line">SELECT id FROM dept WHERE NAME &#x3D; &#39;财务部&#39; OR NAME &#x3D; &#39;市场部&#39;;</span><br><span class="line">SELECT * FROM emp WHERE dept_id &#x3D; 3 OR dept_id &#x3D; 2;</span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME &#x3D; &#39;财务部&#39; OR NAME &#x3D; &#39;市场部&#39;);</span><br><span class="line"></span><br><span class="line">3. 子查询的结果是多行多列的：</span><br><span class="line">* 子查询可以作为一张虚拟表参与查询</span><br><span class="line">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line">-- 子查询</span><br><span class="line">SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.&#96;join_date&#96; &gt; &#39;2011-11-11&#39;) t2</span><br><span class="line">WHERE t1.id &#x3D; t2.dept_id;</span><br><span class="line"></span><br><span class="line">-- 普通内连接</span><br><span class="line">SELECT * FROM emp t1,dept t2 WHERE t1.&#96;dept_id&#96; &#x3D; t2.&#96;id&#96; AND t1.&#96;join_date&#96; &gt;  &#39;2011-11-11&#39;</span><br></pre></td></tr></table></figure><h1 id="九、事务"><a href="#九、事务" class="headerlink" title="九、事务"></a>九、事务</h1><h2 id="1、事务的基本介绍"><a href="#1、事务的基本介绍" class="headerlink" title="1、事务的基本介绍"></a>1、事务的基本介绍</h2><blockquote><p>概念：如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p></blockquote><ul><li><p>操作：</p><ol><li><p>开启事务：start transaction;</p></li><li><p>回滚：rollback;</p></li><li><p>提交：commit;</p><p>MySQL数据库中事务默认自动提交</p><ul><li>事务提交的两种方式：<ul><li>自动提交：<ul><li>mysql就是自动提交的</li><li>一条DML(增删改)语句会自动提交一次事务。</li></ul></li><li>手动提交：<ul><li>Oracle 数据库默认是手动提交事务</li><li>需要先开启事务，再提交</li></ul></li></ul></li><li>修改事务的默认提交方式：<ul><li>查看事务的默认提交方式：SELECT @@autocommit; – 1 代表自动提交  0 代表手动提交</li><li>修改默认提交方式： set @@autocommit = 0;<h2 id="2、事务的四大特征："><a href="#2、事务的四大特征：" class="headerlink" title="2、事务的四大特征："></a>2、事务的四大特征：</h2></li></ul></li></ul></li></ol></li><li><p>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</p></li><li><p>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</p></li><li><p>隔离性：多个事务之间。相互独立。</p></li><li><p>一致性：事务操作前后，数据总量不变</p></li></ul><h2 id="3、事务的隔离级别-了解"><a href="#3、事务的隔离级别-了解" class="headerlink" title="3、事务的隔离级别(了解)"></a>3、事务的隔离级别(了解)</h2><blockquote><p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p></blockquote><ul><li><p>存在问题：</p><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol></li><li><p>隔离级别：</p><ol><li><p>read uncommitted：读未提交</p><blockquote><p>产生的问题：脏读、不可重复读、幻读</p></blockquote></li><li><p>read committed：读已提交 （Oracle）</p><blockquote><p>产生的问题：不可重复读、幻读</p></blockquote></li><li><p>repeatable read：可重复读 （MySQL默认）</p><blockquote><p>产生的问题：幻读</p></blockquote></li><li><p>serializable：串行化</p><blockquote><p>可以解决所有的问题</p></blockquote></li></ol></li><li><p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</p></li><li><p>数据库查询隔离级别：</p><blockquote><p>select @@tx_isolation;</p></blockquote></li><li><p>数据库设置隔离级别：</p><blockquote><p>set global transaction isolation level  级别字符串;</p></blockquote></li></ul><h1 id="十、数据库的设计"><a href="#十、数据库的设计" class="headerlink" title="十、数据库的设计"></a>十、数据库的设计</h1><h4 id="1、多表之间的关系"><a href="#1、多表之间的关系" class="headerlink" title="1、多表之间的关系"></a>1、多表之间的关系</h4><h5 id="1-分类："><a href="#1-分类：" class="headerlink" title="1. 分类："></a>1. 分类：</h5><ul><li>一对一(了解)：</li></ul><blockquote><p>如：人和身份证</p><p>分析：一个人只有一个身份证，一个身份证只能对应一个人</p></blockquote><ul><li>一对多(多对一)：</li></ul><blockquote><p>如：部门和员工</p><p>分析：一个部门有多个员工，一个员工只能对应一个部门</p></blockquote><ul><li>多对多：</li></ul><blockquote><p>如：学生和课程</p><p>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p></blockquote><h5 id="2-实现关系："><a href="#2-实现关系：" class="headerlink" title="2. 实现关系："></a>2. 实现关系：</h5><p><img src="/" alt="一对一关系实现" class="lazyload" data-src="https://raw.githubusercontent.com/Ruoyo/img-folder/master/MYSQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%E5%AE%9E%E7%8E%B0.png"></p><p>​    </p><pre><code>3. 案例    -- 创建旅游线路分类表 tab_category    -- cid 旅游线路分类主键，自动增长    -- cname 旅游线路分类名称非空，唯一，字符串 100    CREATE TABLE tab_category (        cid INT PRIMARY KEY AUTO_INCREMENT,        cname VARCHAR(100) NOT NULL UNIQUE    );    -- 创建旅游线路表 tab_route    /*    rid 旅游线路主键，自动增长    rname 旅游线路名称非空，唯一，字符串 100    price 价格    rdate 上架时间，日期类型    cid 外键，所属分类    */    CREATE TABLE tab_route(        rid INT PRIMARY KEY AUTO_INCREMENT,        rname VARCHAR(100) NOT NULL UNIQUE,        price DOUBLE,        rdate DATE,        cid INT,        FOREIGN KEY (cid) REFERENCES tab_category(cid)    );    /*创建用户表 tab_user    uid 用户主键，自增长    username 用户名长度 100，唯一，非空    password 密码长度 30，非空    name 真实姓名长度 100    birthday 生日    sex 性别，定长字符串 1    telephone 手机号，字符串 11    email 邮箱，字符串长度 100    */    CREATE TABLE tab_user (        uid INT PRIMARY KEY AUTO_INCREMENT,        username VARCHAR(100) UNIQUE NOT NULL,        PASSWORD VARCHAR(30) NOT NULL,        NAME VARCHAR(100),        birthday DATE,        sex CHAR(1) DEFAULT &apos;男&apos;,        telephone VARCHAR(11),        email VARCHAR(100)    );    /*    创建收藏表 tab_favorite    rid 旅游线路 id，外键    date 收藏时间    uid 用户 id，外键    rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次    */    CREATE TABLE tab_favorite (        rid INT, -- 线路id        DATE DATETIME,        uid INT, -- 用户id        -- 创建复合主键        PRIMARY KEY(rid,uid), -- 联合主键        FOREIGN KEY (rid) REFERENCES tab_route(rid),        FOREIGN KEY(uid) REFERENCES tab_user(uid)    );</code></pre><h1 id="十一、数据库的备份和还原"><a href="#十一、数据库的备份和还原" class="headerlink" title="十一、数据库的备份和还原"></a>十一、数据库的备份和还原</h1><h2 id="1-命令行："><a href="#1-命令行：" class="headerlink" title="1. 命令行："></a>1. 命令行：</h2><ul><li>备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件。source 文件路径</li></ol></li></ul><h2 id="2-图形化工具："><a href="#2-图形化工具：" class="headerlink" title="2. 图形化工具："></a>2. 图形化工具：</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、MySQl数据库软件&quot;&gt;&lt;a href=&quot;#一、MySQl数据库软件&quot; class=&quot;headerlink&quot; title=&quot;一、MySQl数据库软件&quot;&gt;&lt;/a&gt;一、MySQl数据库软件&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
      <category term="MySql" scheme="http://yoursite.com/tags/MySql/"/>
    
  </entry>
  
</feed>
